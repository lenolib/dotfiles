
# Shorthand for moving up file tree
alias f='cd ..'

function clrdiff () { colordiff -y -W $(tput cols) "$@" | less -R;}
function hgrep () { history | grep -P -- "$*"; }

# ls variation aliases
alias ll='ls -alF'
alias la='ls -A'
alias lh='ls -lFh'
alias l='ls -lF'
alias lsize='ls -lAhr --sort=size'

# ----------------------------------
# Display ls filesizes with decimals
# ----------------------------------
lsMB="--color=always | awk ""'"'BEGIN{mega=1048576} { sz = sprintf("%0.3f", $5/mega)} {gsub("^0*", "", sz)} {$1 = sprintf("%s %+3s %-8s %-8s %+9s M %+3s %+2s %+5s ", $1, $2, $3, $4, sz, $6, $7, $8)} {$2=""}{$3=""}{$4=""}{$5=""}{$6=""}{$7=""}{$8=""}{print}'"'"
lsKB="--color=always | awk ""'"'BEGIN{kilo=1024} { sz = sprintf("%0.3f", $5/kilo)} {gsub("^0*", "", sz)} {$1 = sprintf("%s %+3s %-8s %-8s %+12s K %+3s %+2s %+5s ", $1, $2, $3, $4, sz, $6, $7, $8)} {$2=""}{$3=""}{$4=""}{$5=""}{$6=""}{$7=""}{$8=""}{print}'"'"
alias lk="ls -l $lsKB"
alias lks="ls -l -r --sort=size $lsKB"
alias lksr="ls -l --sort=size $lsKB"
alias lm="ls -l $lsMB"
alias lms="ls -l -r --sort=size $lsMB"
alias lmsr="ls -l --sort=size $lsMB"


alias flu="fleetctl list-units | grep "
alias fluf="fleetctl list-unit-files | grep "
alias fj="fleetctl journal -lines=300"
alias fjf="fleetctl journal -f -lines=300"
alias fnr="fleetctl list-units | grep -v running"
alias not_running="fleetctl list-units | grep -v running"
alias flm="fleetctl list-machines"
alias fsp="fleetctl stop "
alias fst="fleetctl start "
alias fd="fleetctl destroy "

# all_machines [<role-filter>] [<command>]
# Example: run command on all machiness disregarding of role (note douple-douple-quotation marks)
#$> all_machines "" 'hostname; uptime; echo'  # Echo newline between each machine
function all_machines {
    command=${*:2}
    # This part sorts strings by length ==============>                                                          <====
    fleetctl list-machines | grep "role=" | grep "$1" | awk '{ print length, $0 }' | sort -n -s | cut -d" " -f2- | tee /dev/tty | cut -f2 | xargs -I{} bash -c "</dev/tty ssh {} '$command'"
}
export -f all_machines
 
# List running dockers foreach "worker" (check load balance)
alias docker_running='all_machines "" docker ps'
alias docker_recent='all_machines "" docker ps | grep -v CONTAINER | grep -v days | grep -v months | grep -v hours | grep -v weeks'


# Jump into running container or run a command in running container
# Usage:
#$> docker_run predictdata-cumulator@0  # jumps into a console of the running container
#$> docker_run predictdata-cumulator@0 hostname  # check hostname of running container
#$> docker_run predictdata-cumulator@0 ls -lah  # run arbitrary command with parameters
function docker_run {
    command=${*:2}
    fleetctl ssh $1 docker exec -it ${1/@/.} ${command:-bash}
} 
export -f docker_run

# try on all machines (no guarantee that it will run)
function try_all_machines {
    command=${*:2}
    fleetctl list-machines | grep "role=" | grep "$1" | sort -V | tee /dev/tty | cut -f2 | xargs -I{} bash -c "</dev/tty ssh {} $command || true"
}
export -f try_all_machines

# Restart all failed instances (here for reference, copy/uncomment to use)
# fleetctl list-units | grep "failed$" | tee /dev/tty | awk -F. '{print $1}' | xargs -I{} bash -c 'function restart { fleetctl destroy $1; fleetctl start $1; }; restart {}'
# Remove all exited containers on cluster (here for reference, copy/uncomment to use)
# fleetctl list-machines | grep 'worker$' | awk -F. '{print $1}' | xargs -I{} timeout 30 fleetctl ssh {} bash -c 'hostname; docker ps -a | grep Exited | cut -d" " -f1 | xargs docker rm'

bind '"\C-e": alias-expand-line'

alias iptl="sudo iptables -nvL"
alias fl="fleetctl "

function getsrvc () { flu '' | cut -f1 | grep $1 | grep $2 | cut -f1 -d '@' | uniq ; }


